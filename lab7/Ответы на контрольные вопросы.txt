1. Что такое рекурсивная подпрограмма?
Рекурсивная подпрограмма - подпрограмма, которая в ходе выполнения вызывает саму себя.

2. Что такое итерация?
Это многократное повторение одного и того же действия раз за разом.

3. Что такое стек? Каким образом стек используется при реализации рекурсии?
Стек это тип данных, представляющий собой список элементов.
По организации похоже на стопку тарелок: чтобы достать нижнюю, надо снять все сверху.
В рекурсии это главный элемент.
Функциия вызванная по данным числам - это нижняя тарелка. Чтобы достать её, нужно снять все верхние,
к которым мы обращаемся с помощью рекурсии.

4. Составьте рекурсивный и итерационный алгоритмы нахождения N!
C помощью рекурсии:
def fact(n): 
   if n == 0: 
	return 1
   else: 
	return fact(n - 1) * n 

print(fact(6))

C помощью итерации:
def fact(n):
    result = 1
    while n > 1:
        result = result * n
        n -= 1
    return result 

print(fact(6))

5. Объясните термин "косвенная рекурсия"
Косвенная рекурсия отличается от прямой тем, что:
- Основная подпрограмма вызвает воторую, а та в свою очередь вызывает первую.

6. Естественно рекурсивная программа будет наиболее эффективной, 
так как как таковых операторов присваивания в ней не будет.
def P(n, x):
    if n == 0:
        f.write('1 ')
        return 1
    elif n == 1:
        f.write(str(x) + " ")
        return x
    else:
        return (- ((n - 1) * P(n - 2, x)) + (2 * n - 1) * x * P(n - 1, x)) / n

def P_iteration(x, n):
    p1 = 1
    p2 = x
    count = 2
    for i in range(2, n + 1):
        p1 = p2 * x * (2 * i + 1) / (i + 1) - p1 * i / (i + 1)
        b = p1
        p1 = p2
        p2 = b
        count += 4
    print(count)
    return p2

